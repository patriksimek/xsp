// Generated by CoffeeScript 1.6.2
(function() {
  var Task;

  Task = (function() {
    /**
    	 * Handle to interval uid set by setInterval.
    	 * @type {number}
    	 * @private
    */
    Task.prototype._handle = null;

    /**
    	 * Internal function.
    	 * @type {function}
    	 * @private
    */


    Task.prototype._action = null;

    /**
    	 * Indicates if the task is running.
    	 * @type {boolean}
    */


    Task.prototype.running = false;

    /**
    	 * Task
    	 * @constructor
    */


    function Task(name, interval, action) {
      var _this = this;

      this.name = name;
      this.interval = interval;
      this.action = action;
      this._action = function() {
        var started;

        if (_this.running) {
          _this._report('warning', 'Task execution skipped because the previous task is already running.');
          return;
        }
        started = +Date.now();
        _this.running = true;
        _this._report('info', 'Executing task.');
        return _this.action(function(err) {
          if (err) {
            _this._report('error', err);
          } else {
            _this._report('info', "Task completed in " + (+Date.now() - started) + "ms.");
          }
          return _this.running = false;
        });
      };
    }

    /**
    	 * Start task.
    	 * @param {boolean=} runImmediately Task start immediately if true. False by default.
    */


    Task.prototype.start = function(runImmediately) {
      var _this = this;

      if (this._handle) {
        return;
      }
      this._handle = setInterval(this._action, this.interval);
      if (runImmediately) {
        return process.nextTick(function() {
          return _this._action();
        });
      }
    };

    /**
    	 * Stop task.
    */


    Task.prototype.stop = function() {
      clearInterval(this._handle);
      return this._handle = null;
    };

    /**
    	 * Restart task.
    */


    Task.prototype.restart = function() {
      this.stop();
      return this.start();
    };

    /**
    	 * Restart task.
    	 * @param {function(err)} callback A function to be called after the execution is done.
    */


    Task.prototype.execute = function(callback) {
      return this.action(callback);
    };

    /**
    	 * Report task activity.
    	 * @param {string} level Level of message (info, warning, error).
    	 * @param {(string|object)} msg String message or Error object.
    	 * @private
    */


    Task.prototype._report = function(level, msg) {
      if (module.exports.silent) {
        return;
      }
      if (typeof msg === 'string') {
        if (level === 'error') {
          return trace.red("[xsp:task] " + this.name + ": " + msg);
        } else if (level === 'warning') {
          return trace.yellow("[xsp:task] " + this.name + ": " + msg);
        } else {
          return trace.grey("[xsp:task] " + this.name + ": " + msg);
        }
      } else {
        if (level === 'error') {
          return trace.red("[xsp:task] " + this.name + ": " + msg.message);
        } else if (level === 'warning') {
          return trace.yellow("[xsp:task] " + this.name + ": " + msg.message);
        } else {
          return trace.grey("[xsp:task] " + this.name + ": " + msg.message);
        }
      }
    };

    return Task;

  })();

  /**
   * Array of tasks.
   * @type {Array.<Task>}
  */


  module.exports.tasks = [];

  /**
   * No log output if true.
   * @type {boolean}
  */


  module.exports.silent = true;

  /**
   * Register a new task.
   * @param {number} interval Repeat interval in milliseconds.
   * @param {function(callback)} action A function to be called in specified interval.
   * @return {Task}
  */


  module.exports.add = function(name, interval, action) {
    var t;

    t = new Task(name, interval, action);
    this.tasks.push(t);
    return t;
  };

  /**
   * Start all registered tasks.
   * @param {boolean=} runImmediately Task start immediately if true. False by default.
  */


  module.exports.start = function(runImmediately) {
    var task, _i, _len, _ref, _results;

    _ref = this.tasks;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      _results.push(task.start(runImmediately));
    }
    return _results;
  };

  /**
   * Stop all registered tasks.
  */


  module.exports.stop = function() {
    var task, _i, _len, _ref, _results;

    _ref = this.tasks;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      _results.push(task.stop());
    }
    return _results;
  };

  /**
   * Restart all registered tasks.
  */


  module.exports.restart = function() {
    var task, _i, _len, _ref, _results;

    _ref = this.tasks;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      _results.push(task.restart());
    }
    return _results;
  };

  /**
   * Return task by specified name or null.
   * @param {string} name Name of the task.
  */


  module.exports.task = function(name) {
    var task, _i, _len, _ref;

    _ref = this.tasks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      if (task.name === name) {
        return task;
      }
    }
    return null;
  };

}).call(this);
