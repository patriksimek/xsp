// Generated by CoffeeScript 1.6.2
(function() {
  var __parse;

  __parse = Date.parse;

  Date.parse = function(date, pattern) {
    var c, cc, f, i, index, match, re, value, values, x, _i, _len, _ref, _ref1, _ref2, _ref3;

    if (!pattern) {
      return __parse(date);
    } else {
      re = '';
      f = pattern;
      x = [];
      while (f) {
        i = 1;
        c = f.substr(0, 1);
        if (c.charCodeAt(0) === 92) {
          out += f.substr(1, 1);
          f = f.substr(Math.min(f.length, 2));
        } else {
          cc = c;
          while (f.substr(i, 1) === c) {
            cc += f.substr(i, 1);
            i++;
          }
          f = f.substr(i);
          switch (cc) {
            case 'yyyy':
              re += '([0-9]{4})';
               x.push('year');
              break;
            case 'yyy':
              re += '([0-9]{3})';
               x.push('year');
              break;
            case 'yy':
              re += '([0-9]{2})';
               x.push('year');
              break;
            case 'y':
              re += '([0-9]{2})';
               x.push('year');
              break;
            case 'y':
              re += '([0-9]{2})';
               x.push('year');
              break;
            case 'mm':
              re += '([1-9]|[0-1][0-2])';
               x.push('month');
              break;
            case 'm':
              re += '([1-9]|[0-1][0-2])';
               x.push('month');
              break;
            case 'dd':
              re += '([1-9]|[0-2][1-9]|3[0-1])';
               x.push('day');
              break;
            case 'd':
              re += '([1-9]|[0-2][1-9]|3[0-1])';
               x.push('day');
              break;
            case 'hh':
              re += '([1-9]|[0-1][0-9]|2[0-3])';
               x.push('hour');
              break;
            case 'h':
              re += '([1-9]|[0-1][0-9]|2[0-3])';
               x.push('hour');
              break;
            case 'nn':
              re += '([1-9]|[0-5][0-9])';
               x.push('minute');
              break;
            case 'n':
              re += '([1-9]|[0-5][0-9])';
               x.push('minute');
              break;
            case 'ss':
              re += '([1-9]|[0-5][0-9])';
               x.push('second');
              break;
            case 's':
              re += '([1-9]|[0-5][0-9])';
               x.push('second');
              break;
            case 'iii':
              re += '([0-9]{1,3})';
               x.push('millisecond');
              break;
            case 'ii':
              re += '([0-9]{1,3})';
               x.push('millisecond');
              break;
            case 'i':
              re += '([0-9]{1,3})';
               x.push('millisecond');
              break;
            default:
              re += "\\" + cc;
          }
        }
      }
      re = new RegExp("^" + re + "$", '');
      match = date.match(re);
      if (match) {
        values = {};
        for (index = _i = 0, _len = match.length; _i < _len; index = ++_i) {
          value = match[index];
          if (index > 0) {
            values[x[index - 1]] = parseInt(value);
          }
        }
        return new Date(values.year, values.month - 1, values.day, (_ref = values.hour) != null ? _ref : 0, (_ref1 = values.minute) != null ? _ref1 : 0, (_ref2 = values.second) != null ? _ref2 : 0, (_ref3 = values.millisecond) != null ? _ref3 : 0);
      } else {
        return null;
      }
    }
  };

  Object.defineProperty(Date.prototype, 'format', {
    value: function(f) {
      var c, cc, i, out;

      out = '';
      while (f) {
        i = 1;
        c = f.substr(0, 1);
        if (c.charCodeAt(0) === 92) {
          out += f.substr(1, 1);
          f = f.substr(Math.min(f.length, 2));
        } else {
          cc = c;
          while (f.substr(i, 1) === c) {
            cc += f.substr(i, 1);
            i++;
          }
          f = f.substr(i);
          switch (cc) {
            case 'yyyy':
              out += this.getFullYear();
              break;
            case 'yyy':
              out += String(this.getFullYear()).substr(1);
              break;
            case 'yy':
              out += String(this.getFullYear()).substr(2);
              break;
            case 'y':
              out += Number(String(this.getFullYear()).substr(2));
              break;
            case 'y':
              out += Number(String(this.getFullYear()).substr(2));
              break;
            case 'mm':
              out += Number(this.getMonth() + 1).digits(2);
              break;
            case 'm':
              out += this.getMonth() + 1;
              break;
            case 'dd':
              out += Number(this.getDate()).digits(2);
              break;
            case 'd':
              out += this.getDate();
              break;
            case 'hh':
              out += Number(this.getHours()).digits(2);
              break;
            case 'h':
              out += this.getHours();
              break;
            case 'nn':
              out += Number(this.getMinutes()).digits(2);
              break;
            case 'n':
              out += this.getHours();
              break;
            case 'ss':
              out += Number(this.getSeconds()).digits(2);
              break;
            case 's':
              out += this.getHours();
              break;
            case 'iii':
              out += Number(this.getMilliseconds()).digits(3);
              break;
            case 'ii':
              out += Number(this.getMilliseconds()).digits(2);
              break;
            case 'i':
              out += this.getMilliseconds();
              break;
            default:
              out += cc;
          }
        }
      }
      return out;
    },
    enumerable: false
  });

  Object.defineProperty(Date.prototype, 'diff', {
    value: function(units, dt) {
      var d;

      d = 0;
      switch (units.toLowerCase()) {
        case 'y':
          d = Math.floor((dt - this) / (365 * 24 * 60 * 60 * 1000));
          break;
        case 'm':
          d = Math.floor((dt - this) / (30 * 24 * 60 * 60 * 1000));
          break;
        case 'd':
          d = Math.floor((dt - this) / (24 * 60 * 60 * 1000));
          break;
        case 'h':
          d = Math.floor((dt - this) / (60 * 60 * 1000));
          break;
        case 'n':
          d = Math.floor((dt - this) / (60 * 1000));
          break;
        case 's':
          d = Math.floor((dt - this) / 1000.);
          break;
        case 'i':
          d = Math.floor(dt - this);
      }
      return d;
    },
    enumerable: false
  });

  Object.defineProperty(Date.prototype, 'add', {
    value: function(units, value) {
      switch (units.toLowerCase()) {
        case 'y':
          this.setFullYear(this.getFullYear() + value);
          break;
        case 'm':
          this.setMonth(this.getMonth() + value);
          break;
        case 'd':
          this.setDate(this.getDate() + value);
          break;
        case 'h':
          this.setHours(this.getHours() + value);
          break;
        case 'n':
          this.setMinutes(this.getMinutes() + value);
          break;
        case 's':
          this.setSeconds(this.getSeconds() + value);
          break;
        case 'i':
          this.setMilliseconds(this.getMilliseconds() + value);
      }
      return this;
    },
    enumerable: false
  });

}).call(this);
