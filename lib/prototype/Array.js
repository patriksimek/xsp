// Generated by CoffeeScript 1.6.2
(function() {
  var __filter;

  Object.defineProperty(Array.prototype, 'clone', {
    value: function(sort) {
      return this.slice();
    },
    enumerable: false
  });

  Object.defineProperty(Array.prototype, 'first', {
    value: function() {
      return this[0];
    },
    enumerable: false
  });

  Object.defineProperty(Array.prototype, 'last', {
    value: function() {
      return this[this.length - 1];
    },
    enumerable: false
  });

  Object.defineProperty(Array.prototype, 'union', {
    value: function(sort) {
      var asc, first, out, queries;

      if (this.length < 2) {
        return this;
      }
      queries = this.clone();
      first = queries.shift();
      out = first.concat.apply(first, queries);
      if (sort) {
        asc = true;
        if (sort.substr(0, 1) === '-') {
          asc = false;
          sort = sort.substr(1);
        }
        out.sort(function(a, b) {
          if (asc) {
            return a[sort] - b[sort];
          } else {
            return b[sort] - a[sort];
          }
        });
        return out;
      } else {
        return out;
      }
    },
    enumerable: false
  });

  Object.defineProperty(Array.prototype, 'groupBy', {
    value: function(prop) {
      var groups, item, _i, _len;

      groups = {};
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        if (!groups[item[prop]]) {
          groups[item[prop]] = [];
        }
        groups[item[prop]].push(item);
      }
      return groups;
    },
    enumerable: false
  });

  __filter = Array.prototype.filter;

  Object.defineProperty(Array.prototype, 'filter', {
    value: function(callback, thisObject) {
      if (typeof callback === 'function') {
        return __filter.call(this, callback, thisObject);
      } else {
        return __filter.call(this, function(element, index, array) {
          var name, value;

          for (name in callback) {
            value = callback[name];
            if (element[name] !== value) {
              return false;
            }
          }
          return true;
        });
      }
    },
    enumerable: false
  });

}).call(this);
